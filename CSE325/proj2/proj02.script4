#/bin/tcsh -f 



if ($#argv != 2) then
	echo "Error: Too many tokens supplied \n Usage: proj02.script4 [len] [OPTION] \n len is an integer number representing the length of the desired \n list of census units. \n OPTION is either C, T, or A without quotes, representing whether or \n not you want cities, townships, or both respectively"
else
	set result = `expr match $argv[1] '^[0-9]*$'`
	if ( $result == 0) then 
		echo "Error: Invalid tokens supplied \n Usage: proj02.script4 [len] [OPTION] \n len is an integer number representing the length of the desired \n list of census units. \n OPTION is either C, T, or A without quotes, representing whether or \n not you want cities, townships, or both respectively"
	else if ($argv[2] == "C") then
		cat /user/cse325/Projects/project02.headers
		sort -nr -t "|" -k 3 /user/cse325/Projects/project02.data | grep -v "township" | head -n $argv[1]
	else if ($argv[2] == "T") then
		cat /user/cse325/Projects/project02.headers
		sort -nr -t "|" -k 3 /user/cse325/Projects/project02.data | grep -v "city" | head -n $argv[1]
	else if ($argv[2] == "A") then
		cat /user/cse325/Projects/project02.headers
		sort -nr -t "|" -k 3 /user/cse325/Projects/project02.data | head -n $argv[1]
	else
		echo "Error: Invalid tokens supplied \n Usage: proj02.script4 [len] [OPTION] \n len is an integer number representing the length of the desired \n list of census units. \n OPTION is either C, T, or A without quotes, representing whether or \n not you want cities, townships, or both respectively"
	endif
endif
